# Zero-downtime web server restarts with Flying Passenger Enterprise
<%= render_partial('/shared/current_selection', locals: { disabled_selections: [:lang] }) %>

Flying Passenger allows one to decouple Passenger's life time from the web server's life time, so that the web server can be independently restarted from Passenger, and from any of the application processes served by Passenger.

<div class="note">
  Flying Passenger isn't the same as <a href="zero_downtime_redeployments/">zero-downtime application updates and restarts</a>! It is a distinct feature. To achieve full zero-downtime, you will want <strong>both</strong> features enabled.
</div>

**Table of contents**

<ul class="toc-container"><li>Loading...</li></ul>

## Introduction

Normally, Passenger starts together with the web server, and shuts down together with the web server. The advantages of this default behavior is that it makes Passenger easy to administer: one only has to deal with the web server process and can expect all relevant processes to be cleaned up after a web server shut down. However this also brings about a disadvantage: every time one restarts the web server (e.g. to make a minor configuration change), Passenger and all its application processes also get restarted.

This problem is solved by 'Flying Passenger', which is an advanced mode of operation in Passenger that allows the web server to be independently restarted from Passenger. When this mode is enabled:

 * One must start Passenger separately from the web server, namely by starting the Flying Passenger daemon. This daemon must - to an extent - be separately configured and managed from the web server.
 * The web server must be configured to forward requests to the Flying Passenger daemon.
 * You should beware of the [caveats and limitations](#caveats-and-limitations).

The Flying Passenger mode is off by default. You have to explicitly enable it.

There is also a distinct problem, namely that of restarting web applications without downtime after you have deployed application updates. That problem is solved by [the rolling restarts feature](zero_downtime_redeployments/), not by Flying Passenger. To achieve full zero-downtime, you will want to enable both rolling restarts **and** Flying Passenger.

## Requirements

 * The Flying Passenger feature is only available in [Passenger Enterprise](https://www.phusionpassenger.com/features#premium-features). Buy Passenger Enterprise [here](https://www.phusionpassenger.com/features#premium-features).
<% if integration_mode_type == :nginx %>
 * Passenger version 4.0.6 or higher installed on Nginx.
<% end %>
<% if integration_mode_type == :apache %>
 * Passenger version 4.0.45 or higher installed on Apache.
<% end %>

## Basic usage

Start the Flying Passenger daemon by invoking the `flying-passenger` command. The only required option is `--socket-file`. Depending on whether you wish to enable [user account sandboxing](<%= url_for "/advanced_guides/deployment_and_scaling/nginx/user_sandboxing.html" %>), you have to start `flying-passenger` with root privileges or not.

<pre class="highlight"><span class="prompt">$ </span>sudo flying-passenger --socket-file=/var/run/flying-passenger.sock
<span class="output">I, [2013-06-14T09:10:13.095339 #77179]  INFO -- : Welcome to Flying Passenger 5.0.11
I, [2013-06-14T09:10:13.095339 #77179]  INFO -- : Starting PassengerAgent...
I, [2013-06-14T09:10:13.097036 #77179]  INFO -- : PassengerAgent started on PID 77181
...
I, [2013-06-14T09:10:13.129017 #77179]  INFO -- : PassengerAgent initialized properly
I, [2013-06-14T09:10:13.129127 #77179]  INFO -- : Flying Passenger up and listening on /var/run/flying-passenger.sock!</span></pre>

Now configure the web server to make use of the Flying Passenger daemon by setting the <code>passenger_fly_with</code> option to the socket filename:

<% if integration_mode_type == :nginx %>
  <pre class="highlight">http {
    ...
    passenger_fly_with /var/run/flying-passenger.sock;
    ...
}</pre>
<% end %>
<% if integration_mode_type == :apache %>
  <pre class="highlight">PassengerFlyWith unix:/var/run/flying-passenger.sock</pre>
<% end %>

After (re)starting the web server, Flying Passenger is fully operational.

You can test it by adding a virtual host for a web app:
<% if integration_mode_type == :nginx %>
<pre class="highlight">http {
    ...

    server {
        listen 80;
        server_name www.foo.local;
        root /webapps/foo/public;
        passenger_enabled on;
    }
}</pre>
<% end %>
<% if integration_mode_type == :apache %>
<pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName www.foo.local
    DocumentRoot /webapps/foo/public
&lt;/VirtualHost&gt;</pre>
<% end %>

Verify that it works by making an HTTP request to it:

<pre class="highlight"><span class="prompt">$ </span>curl http://www.foo.local/</pre>

Now let's verify that restarting the web server does not restart the just-spawned application process. Run `passenger-status` to obtain the PID of the application process:

<pre class="highlight"><span class="prompt">$ </span>sudo passenger-status
<span class="output">Version : 5.0.11
Date    : 2015-06-24 12:47:13 +0200
<% if integration_mode_type == :nginx %>
Instance: XE6bilnV (nginx/1.8.0 Phusion_Passenger/5.0.11)
<% end %>
<% if integration_mode_type == :apache %>
Instance: XE6bilnV (Apache/2.4.12 Phusion_Passenger/5.0.11)
<% end %>

----------- General information -----------
Max pool size : 6
App groups    : 1
Processes     : 1
Requests in top-level queue : 0

----------- Application groups -----------
/webapps/foo/public:
  App root: /webapps/foo
  Requests in queue: 0
  * PID: 77283    Sessions: 0       Processed: 49991   Uptime: 6h 22m 3s
    CPU: 2%      Memory  : 110M    Last used: 0s ago</span></pre>

As you can see, the PID of the application process is **77283**. Now let's see what happens if we restart the web server:

<% if integration_mode_type == :nginx %>
<pre class="highlight"><span class="prompt">$ </span>sudo service nginx restart
<span class="prompt">$ </span>sudo passenger-status</pre>
<% end %>
<% if integration_mode_type == :apache %>
<pre class="highlight"><span class="prompt">$ </span>sudo service apache2 restart
<span class="prompt">$ </span>sudo passenger-status</pre>
<% end %>

The application process should remain there, unchanged:

<pre class="highlight"><span class="prompt">$ </span>sudo passenger-status
<span class="output">Version : 5.0.11
Date    : 2015-06-24 12:47:45 +0200
<% if integration_mode_type == :nginx %>
Instance: XE6bilnV (nginx/1.8.0 Phusion_Passenger/5.0.11)
<% end %>
<% if integration_mode_type == :apache %>
Instance: XE6bilnV (Apache/2.4.12 Phusion_Passenger/5.0.11)
<% end %>

----------- General information -----------
Max pool size : 6
App groups    : 1
Processes     : 1
Requests in top-level queue : 0

----------- Application groups -----------
/webapps/foo/public:
  App root: /webapps/foo
  Requests in queue: 0
  * PID: 77283    Sessions: 0       Processed: 49992   Uptime: 6h 22m 3s
    CPU: 2%      Memory  : 110M    Last used: 0s ago</span></pre>

## Configuring Flying Passenger

<% if integration_mode_type == :nginx %>
Flying Passenger gets *some* configuration from Nginx, but not all. In particular, most web server directives that are only valid in the `http` context, e.g. [passenger_log_level](<%= url_for "/references/config_reference/nginx/index.html" %>#passenger_log_level), have no effect when using Flying Passenger.
<% end %>
<% if integration_mode_type == :apache %>
Flying Passenger gets *some* configuration from Apache, but not all. In particular, most web server directives that are only valid in the global context, e.g. [PassengerLogLevel](<%= url_for "/references/config_reference/apache/index.html" %>#passengerloglevel), have no effect when using Flying Passenger.
<% end %>
Instead, you are supposed to pass these configuration directives through command line options to the Flying Passenger daemon. Configuration directives that have no effect on Flying Passenger are documented as such. You can assume that configuration directives that are not documented as such, work fine on Flying Passenger.

For example, to achieve the same effect as setting
<% if integration_mode_type == :nginx -%>
  `passenger_log_level`
<% elsif integration_mode_type == :apache -%>
  `PassengerLogLevel`
<% else %>
  <% raise "TODO" %>
<% end -%>
to 2, run the Flying Passenger daemon as follows:

<pre class="highlight"><span class="prompt">$ </span>sudo flying-passenger --socket-file=/var/run/flying-passenger.sock --log-level=2</pre>

Currently, not all configuration directives have a Flying Passenger equivalent. Run the following command to see an overview of available options:

<pre class="highlight"><span class="prompt">$ </span>flying-passenger --help</pre>

## Managing the Flying Passenger daemon

The Flying Passenger daemon runs in the foreground by default. This is undesirable on server environments. You can make it go into the background by passing `--daemonize`, `--log-file` and `--pid-file`:

<pre class="highlight"><span class="prompt">$ </span>sudo flying-passenger --socket-file=/var/run/flying-passenger.sock \
    --daemonize --log-file=/var/log/flying-passenger.log \
    --pid-file=/var/run/flying-passenger.pid</pre>

You can shut down a Flying Passenger daemon by sending SIGINT or SIGTERM to it:

<pre class="highlight"><span class="prompt">$ </span>kill `cat /var/run/flying-passenger.pid`</pre>

We recommend using [daemontools](http://cr.yp.to/daemontools.html) or [runit](http://smarden.org/runit/) for managing the Flying Passenger daemon. These tools will allow automatically starting the Flying Passenger daemon at boot, and will automatically restart the daemon if it crashes. You can create and enable a daemontools/runit service as follows:

<pre class="highlight"><span class="prompt">$ </span>sudo mkdir /etc/service/flying-passenger
<span class="prompt">$ </span>sudo nano /etc/service/flying-passenger/run
<span class="output">#!/bin/sh
exec /path-to/flying-passenger \
    --socket-file=/var/run/flying-passenger.sock \
    --log-file=/var/log/flying-passenger.log \
    --pid-file=/var/run/flying-passenger.pid</span></pre>

Immediately after creating the `run` file, daemontools/runit automatically runs it to start the daemon. Note that the location (`/etc/service`) depends on the OS or Linux distros. Sometimes it's `/service`. Also note that we start the Flying Passenger daemon without `--daemonize`.

To shut down a daemontools/runit-managed daemon, you need to use `svc -d /etc/service/flying-passenger` (daemontools) or `sv stop /etc/service/flying-passenger` (runit) instead of sending a signal to the process.

## Using Flying Passenger with MRI 1.8 or JRuby

Using Flying Passenger in combination with MRI Ruby 1.8 or with JRuby requires special attention. This is because the Flying Passenger daemon is written in Ruby, and requires proper `Process.spawn` support, which neither MRI 1.8 nor JRuby support.

It is however possible to use Flying Passenger with MRI Ruby 1.8 and JRuby. You can't run the Flying Passenger daemon in MRI 1.8 or JRuby, but you can still run the web applications -- hosted under Flying Passenger -- in MRI 1.8 or JRuby.

First, edit your web server configuration file and specify a Ruby interpreter for your web applications. For example:

<% if integration_mode_type == :nginx %>
<pre class="highlight"># Connect to the Flying Passenger daemon on the following socket
passenger_fly_with /var/run/flying-passenger.sock;
...

server {
    listen 80;
    server_name www.foo.com;
    root /webapps/foo/public;
    passenger_enabled on;
    # Use JRuby for this web application
    passenger_ruby /opt/jruby/bin/jruby;
}</pre>
<% end %>
<% if integration_mode_type == :apache %>
<pre class="highlight"># Connect to the Flying Passenger daemon on the following socket
PassengerFlyWith unix:/var/run/flying-passenger.sock
...

&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    DocumentRoot /webapps/foo/public
    # Use JRuby for this web application
    PassengerRuby /opt/jruby/bin/jruby
&lt;/VirtualHost&gt;</pre>
<% end %>

Then you need to install a Ruby 1.9-compatible Ruby interpreter with POSIX spawn support, alongside JRuby/MRI 1.8. Ruby interpreters which can be used for running the Flying Passenger daemon include:

 * MRI Ruby &ge; 1.9.
 * Rubinius.

The following example demonstrates how you can install MRI Ruby 1.9 in parallel with your MRI Ruby 1.8 or JRuby installation.

Example for Debian/Ubuntu users:

~~~bash
# Install Ruby 1.9
sudo apt-get install -y ruby1.9.3
# Run the Flying Passenger daemon in Ruby 1.9
ruby1.9 -S flying-passenger --socket-file=/var/run/flying-passenger.sock
~~~

Example for RVM users:

~~~bash
# Install Ruby 1.9
rvm install 1.9.3
# Run the Flying Passenger daemon in Ruby 1.9
rvm-exec 1.9.3 ruby -S flying-passenger --socket-file=/var/run/flying-passenger.sock
~~~

The Flying Passenger daemon will now be run on Ruby 1.9, while the web application `www.foo.com` will be run on JRuby.

## Caveats and limitations

Beware of the following caveats and limitations when using Flying Passenger.

### General

The Flying Passenger daemon is written in Ruby. It requires a Ruby interpreter with proper `Process#spawn` support. At the time of writing, all Ruby interpreters in existance satisfy this requirement, except for MRI Ruby 1.8 and JRuby. See [Using Flying Passenger with MRI 1.8 or JRuby](#using-flying-passenger-with-mri-18-or-jruby) for more information.

When you add a new application to the web server configuration, Flying Passenger will automatically pick up the application's settings and spawn this new application upon the first request to it. However it is not capable of automatically starting the new app before a request has been sent to it (i.e.
<% if integration_mode_type == :nginx -%>
  [passenger_pre_start](<%= url_for "/references/config_reference/nginx/index.html" %>#passenger_pre_start)-like
<% elsif integration_mode_type == :apache -%>
  [PassengerPreStart](<%= url_for "/references/config_reference/apache/index.html" %>#passengerprestart)-like
<% else -%>
  <% raise "TODO" %>
<% end -%>
behavior is not available in this case). As a workaround, you can send an HTTP request to your application after starting the daemon, which forces it to spawn application processes.

<% if integration_mode_type == :nginx %>
### Nginx

The Nginx executable **must** be compiled with the same version of Passenger as the Flying Passenger daemon. Failing to meet this requirement may result in cryptic errors, or may result in certain features not working, until you've fixed the situation. When upgrading Passenger, you must restart both Nginx and the Flying Passenger daemon.

The [passenger_root](<%= url_for "/references/config_reference/nginx/index.html" %>#passenger_root) directive has no effect. When using Flying Passenger, you are not supposed to set `passenger_root`.

When you remove an application from the web server configuration, Flying Passenger will not detect the removal and will not shut down the associated application processes. Killing the application processes will also not help, because Flying Passenger will restart them per the (now-removed, but still in the Flying Passenger daemon's memory) [passenger_min_instances](<%= url_for "/references/config_reference/nginx/index.html" %>#passenger_min_instances) setting. At the moment, there are two ways to get rid of those processes:

 1. Before removing the application from the web server configuration, explicitly set its `passenger_min_instances` to 0. Next, send a request to it, which will cause the Flying Passenger daemon to take over the new `passenger_min_instances 0` option. You can then proceed with removing the application from the web server configuration, and restarting the web server. Finally, kill the PIDs associated to those application processes and remove the application configuration.
 2. Restart the Flying Passenger daemon.
<% end %>
<% if integration_mode_type == :apache %>
### Apache

The Passenger module that is loaded into Apache, **must** be of the same version as the Flying Passenger daemon. Failing to meet this requirement may result in cryptic errors, or may result in certain features not working, until you've fixed the situation. When upgrading Passenger, you must restart both Apache and the Flying Passenger daemon.

The [PassengerRoot](<%= url_for "/references/config_reference/apache/index.html" %>#passengerroot) directive has no effect. When using Flying Passenger, you are not supposed to set `PassengerRoot`.

When you remove an application from the web server configuration, Flying Passenger will not detect the removal and will not shut down the associated application processes. Killing the application processes will also not help, because Flying Passenger will restart them per the (now-removed, but still in the Flying Passenger daemon's memory) [PassengerMinInstances](<%= url_for "/references/config_reference/apache/index.html" %>#passengermininstances) setting. At the moment, there are two ways to get rid of those processes:

 1. Before removing the application from the web server configuration, explicitly set its `PassengerMinInstances` to 0. Next, send a request to it, which will cause the Flying Passenger daemon to take over the new `PassengerMinInstances 0` option. You can then proceed with removing the application from the web server configuration, and restarting the web server. Finally, kill the PIDs associated to those application processes and remove the application configuration.
 2. Restart the Flying Passenger daemon.
<% end %>

<div class="back-button">
  <a class="dark-button" href="<%= url_for "/advanced_guides/deployment_and_scaling/index.html" %>">Back</a>
</div>

